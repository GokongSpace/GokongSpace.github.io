<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>信息学 on Gokong Space</title>
        <link>https://gokongspace.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/</link>
        <description>Recent content in 信息学 on Gokong Space</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>Gokong Space</copyright>
        <lastBuildDate>Fri, 11 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://gokongspace.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>逻辑函数的化简</title>
        <link>https://gokongspace.github.io/p/%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%96%E7%AE%80/</link>
        <pubDate>Fri, 11 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://gokongspace.github.io/p/%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%96%E7%AE%80/</guid>
        <description>&lt;h1 id=&#34;写在前面&#34;&gt;写在前面
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;“与或”表达式的最简式的定义
在该表达式中同时满足：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;该式的乘积项最少；&lt;/li&gt;
&lt;li&gt;该式不能用变量更少的乘积项代替。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;“或与”表达式的最简式的定义与上述类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;公式化简法&#34;&gt;公式化简法
&lt;/h1&gt;&lt;p&gt;虽然公式化简法不受变量个数的限制，但化简过程没有固定的规律可循，直观性差，带有一定的试探性，并且难以判断结果是否最简。为了寻找更简单的方法，人们研究出了卡诺图化简法。&lt;/p&gt;
&lt;h1 id=&#34;卡诺图化简法&#34;&gt;卡诺图化简法
&lt;/h1&gt;&lt;h2 id=&#34;卡诺图的构成&#34;&gt;卡诺图的构成
&lt;/h2&gt;&lt;p&gt;由$2^{n}$个小方格构成，n表示变量的个数。&lt;br&gt;
每个小方格都对应一个最小项。&lt;br&gt;
在逻辑上相邻的最小项在几何位置上也相邻（包括首位相邻）。&lt;br&gt;
五变量卡诺图具有重叠相邻性。&lt;/p&gt;
&lt;h2 id=&#34;用卡诺图表示逻辑函数&#34;&gt;用卡诺图表示逻辑函数
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用卡诺图表示最小项表达式：&lt;br&gt;
如果逻辑函数以最小项的形式给出,则在构成函数的每个最小项相应的卡诺图小方格中填1,其余的小方格中填0。&lt;/li&gt;
&lt;li&gt;用卡诺图表示&lt;strong&gt;非&lt;/strong&gt;最小项表达式：
用互补律$A+\bar{A}=1$变换成最小项表达式，然后用上述方法。&lt;/li&gt;
&lt;li&gt;直接用卡诺图表示非最小项的与或表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;用卡诺图化简逻辑函数&#34;&gt;用卡诺图化简逻辑函数
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;用卡诺图化简逻辑函数的原理
卡诺图形象地表达了最小项之间的相邻性。如相邻的两小方格均填1，则可用相邻性消去一个变量,使函数得以简化。&lt;/li&gt;
&lt;li&gt;合并&lt;strong&gt;最小项&lt;/strong&gt;的规则
&lt;strong&gt;消去&lt;/strong&gt;卡诺圈取值&lt;strong&gt;改变&lt;/strong&gt;的变量，&lt;strong&gt;保留&lt;/strong&gt;取值&lt;strong&gt;不变&lt;/strong&gt;的变量的&lt;strong&gt;逻辑与&lt;/strong&gt;就是合并的结果。&lt;/li&gt;
&lt;li&gt;合并最小项的规律：
&lt;ol&gt;
&lt;li&gt;卡诺圈中小方格的个数必须是$2^{i}$个。&lt;/li&gt;
&lt;li&gt;卡诺圈中的$2^{i}$个最小项合并，将消去i个变量。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;用卡诺图化简逻辑函数的具体实践步骤：
&lt;ol&gt;
&lt;li&gt;用卡诺图表示所要化简的逻辑函数；&lt;/li&gt;
&lt;li&gt;把卡诺图中所有填1的小方格用卡诺圈圈起来。画圈时必须遵守如下原则:
&lt;ol&gt;
&lt;li&gt;每个圈内1的个数必须是$2^{i}$个；&lt;/li&gt;
&lt;li&gt;每个圈中某些小方格可以多次被圈，但必须保证每个圈内至少有一个小方格仅被圈一次；&lt;/li&gt;
&lt;li&gt;卡诺圈的个数最少；&lt;/li&gt;
&lt;li&gt;每个圈应尽量大；&lt;/li&gt;
&lt;li&gt;任意一个填1的小方格都会被圈。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;将合并的与项进行逻辑加；&lt;/li&gt;
&lt;li&gt;如果卡诺图中填0的小方格比填1的少，也可以圈0先求得简化的&lt;strong&gt;反函数&lt;/strong&gt;，然后再求反得到最简与或式。&lt;/li&gt;
&lt;li&gt;无关项：在小方格中填“d”，d可以看作1也可以看作0. 一个卡诺圈里不能全是d.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;用卡诺图化简最大项表达式&#34;&gt;用卡诺图化简最大项表达式
&lt;/h2&gt;&lt;p&gt;以上我们用化简最小项表达式来介绍卡诺图法，化简最大项表达式的方法与之类似。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在最大项对应的小方格中填“0”.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;一个逻辑函数表达式对应一个卡诺图。&lt;/li&gt;
&lt;li&gt;共享项：对于多输出函数，为了节省逻辑门的个数，我们尽可能使化简后的不同逻辑函数表达式有共有的项。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;事实上,卡诺图、真值表、逻辑表达式之间是可以相互转换的。
从真值表向逻辑函数的转换：将真值表中函数F=1所对应的最小项求逻辑和。从真值表得到卡诺图：将真值表的函数值1或0,按顺序直接填入卡诺图相对应的小方格内。&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>逻辑函数的表示方法</title>
        <link>https://gokongspace.github.io/p/%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</link>
        <pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://gokongspace.github.io/p/%E9%80%BB%E8%BE%91%E5%87%BD%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</guid>
        <description>&lt;h1 id=&#34;相邻项&#34;&gt;相邻项
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;相邻项：相邻两项，只有一个变量不同，且该变量以相反的形式出现。&lt;/li&gt;
&lt;li&gt;（性质）：相邻项相加可以消去一项，例如：$F=ABC+A\bar{B}C=AC(B+\bar{B})=AC$&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;表示逻辑函数的常用方法&#34;&gt;表示逻辑函数的常用方法
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;逻辑表达式：
&lt;ul&gt;
&lt;li&gt;由逻辑变量和与或非三种运算符构成的式子。&lt;/li&gt;
&lt;li&gt;例如，异或函数：当两个变量取值相同时，函数取值为0；否则，函数取值为1. $$F=f\left ( A，B \right )=A\bar{B}+\bar{A}B$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;真值表&lt;/li&gt;
&lt;li&gt;卡诺图&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;逻辑函数表达式的基本形式&#34;&gt;逻辑函数表达式的基本形式：
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;“与或”表达式：
“与项”的“逻辑或”构成“与或”表达式。即，&lt;strong&gt;积之和&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;“或与”表达式：
“或项”的“逻辑与”构成“或与”表达式。即，&lt;strong&gt;和之积&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;若逻辑函数以混合形式出现，则既不是与或表达式，也不是或与表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;最小项与最大项&#34;&gt;最小项与最大项
&lt;/h1&gt;&lt;h2 id=&#34;最小项及最小项表达式&#34;&gt;最小项及最小项表达式：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“标准与或表达式”，又称作“最小项表达式”。&lt;/li&gt;
&lt;li&gt;定义：设有n个逻辑变量，它们组成的“与项”中，每个变量或以原变量或以反变量的形式出现一次且仅出现一次，则称这个“与项”为n变量的最小项。记作：$m_{i}$
&lt;ul&gt;
&lt;li&gt;最小项编号的记忆方法：$A$为1，$\bar{A}$为0，带入编号使“与项”值为1.例如：$A\bar{B}\bar{C}$，带入100，其逻辑值为1，故$A\bar{B}\bar{C}$的编号为$m_{4}$ .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最小项的性质&#34;&gt;最小项的性质
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于任意一个最小项$m_{i}$ ，有且仅有一组变量的取值能使其为1.（即最小项为1的概率最小，也因此得名）&lt;/li&gt;
&lt;li&gt;任意两个最小项的逻辑积为0.&lt;/li&gt;
&lt;li&gt;所有最小项的逻辑和为1.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最小项表达式&#34;&gt;最小项表达式
&lt;/h3&gt;&lt;p&gt;最小项表达式（标准与或表达式、主析取范式）：将逻辑函数用最小项之和的形式来表示。
例如：
&lt;/p&gt;
$$F=\overline{AB}+A\overline{B}+AB=m_{0}+m_{2}+m_{3}=\sum m^{2}\left ( 0,2,3 \right )$$&lt;p&gt;
性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若$m_{i}$是n变量逻辑函数$F=(A_{1},A_{2},\cdot\cdot\cdot,A_{n})$的一个最小项，则使$m_{i}=1$的一组变量取值也必定使F的值为1.&lt;/li&gt;
&lt;li&gt;若$F_{1}$和$F_{2}$都是$A_{1},A_{2},\cdot\cdot\cdot,A_{n}$的函数，则$F=F_{1}+F_{2}$包括$F_{1}$和$F_{2}$中的所有最小项，$G=F_{1}\times F_{2}$包括$F_{1}$和$F_{2}$中的公有最小项。&lt;/li&gt;
&lt;li&gt;若逻辑函数$\bar{F}$是逻辑函数$F$的反函数，则$\bar{F}$必定由$F$所包含的最小项之外的全部最小项组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最大项及最大项表达式&#34;&gt;最大项及最大项表达式：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;“标准或与表达式”，又称作“最大项表达式”。&lt;/li&gt;
&lt;li&gt;定义：设有n个逻辑变量，它们组成的“或项”中，每个变量或以原变量或以反变量的形式出现一次且仅出现一次，则称这个“或项”为n变量的最大项。记作：$M_{i}$
&lt;ul&gt;
&lt;li&gt;最大项编号的记忆方法：$A$为1，$\bar{A}$为0，带入编号使“或项”值为0.例如：$A+\bar{B}+\bar{C}$，带入011，其逻辑值为0，故$A+\bar{B}+\bar{C}$的编号为$m_{3}$ .&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最大项的性质&#34;&gt;最大项的性质
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于任意一个最大项$M_{i}$ ，有且仅有一组变量的取值能使其为0.&lt;/li&gt;
&lt;li&gt;任意两个最大项的逻辑和为1.&lt;/li&gt;
&lt;li&gt;所有最大项的逻辑积为0.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最大项表达式&#34;&gt;最大项表达式
&lt;/h3&gt;&lt;p&gt;最大项表达式：将逻辑函数用最大项之积的形式表示。
例如：
&lt;/p&gt;
$$F=(A+B+C)(A+B+\bar{C})(A+\bar{B}+C)=M_{0}\cdot M_{1}\cdot M_{2}= \prod  M^{3}\left ( 0,1,2 \right )$$&lt;p&gt;
性质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据最大项表达式的定义，我们可以推出类似于最小项表达式的三个性质。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最小项与最大项的关系&#34;&gt;最小项与最大项的关系
&lt;/h2&gt;&lt;p&gt;$\overline{m_{i}}=M_{i}$或者$m_{i}=\overline{M_{i}}$&lt;/p&gt;
&lt;h1 id=&#34;逻辑函数表达式的转换&#34;&gt;逻辑函数表达式的转换
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;两种标准形式的转换（最小项表达式与最大项表达式的转换）：
把同一个函数表达式$F$分别用“最小项之和”和“最大项之积“的形式表示。
例如，对于3元函数表达式
$$F= \sum m^{3}(2,3,6,7)=\prod M^{3}(0,1,4,5)$$
可以发现，每一项的编号是”互补“的。可以用德摩根定理$F=\bar{\bar{F}}$ 或求反演来证明。
&lt;ul&gt;
&lt;li&gt;另外,我们有取非的性质$$\bar{F}= (0,1,4,5)$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“与或”$\Rightarrow$&amp;ldquo;与非-与非&amp;rdquo;：
两次求反。&lt;/li&gt;
&lt;li&gt;“与或”$\Rightarrow$&amp;ldquo;或非-或非&amp;rdquo;：
当F是最简与或表达式时，先求F的对偶式F‘，再将F‘变换成&amp;quot;与非-与非&amp;quot;，最后求F‘的对偶式。&lt;/li&gt;
&lt;li&gt;“与或”$\Rightarrow$&amp;ldquo;与或非&amp;rdquo;：
先求反函数$\bar{F}$，再对$\bar{F}$求反。&lt;/li&gt;
&lt;li&gt;“与或”$\Rightarrow$&amp;ldquo;或与&amp;rdquo;：
先求反函数$\bar{F}$，再对$\bar{F}$求反。再用摩根定律拆开。&lt;/li&gt;
&lt;li&gt;“或与”$\Rightarrow$&amp;ldquo;或非-或非&amp;rdquo;：
先求F的对偶式F‘并化简，然后求F‘的对偶式，再两次求反。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
